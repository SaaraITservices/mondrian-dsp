<project basedir="." default="all" name="com.mysample.mondrian.dsp">
	<!-- Manifest properties -->
	<property name="name" value="pentaho_dsp_extension" />
	<property name="title" value="com.mysample.mondrian.dsp" />

	<!-- The name of application -->
	<property name="app.name" value="com.mysample.mondrian.dsp" />

	<!-- The version of application -->
	<property name="version" value="1.0.0" />

	<!-- The directory containing source code -->
	<property name="src" value="src" />

	<!-- Temporary build directory -->
	<property name="build" value="build" />
	<property name="dist" value="dist" />


	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - 
	     The directories containing required libraries
	     - - - - - - - - - - - - - - - - - - - - - - - -  -->
	<property name="lib.core" value="${basedir}/lib" />

    <!-- The module dependent on Pentaho Core, API and Extensions packages.
         All those are available in assembled Pentaho's lib directory.
         TODO: set the path pointing to assembled Pentaho's lib directory here, or provide the jars listed below in any other way.
      -->
    <property name="lib.pentaho" value="C:/Apps/BI_DWH_OLAP/penthao/biserver-ce/tomcat/webapps/pentaho/WEB-INF/lib" />

    <!-- The module requires Servlet API jar for compilation.
         In case of standard deployment on the Tomcat, the servlet jar can be observed relatively to Pentaho lib dir
         defined above. Otherwise, just specify any directory that servlet-api.jar is located in.
    -->
    <property name="lib.servlet" value="${lib.pentaho}/../../../../lib" />


    <path id="classpath">
		<fileset dir="${lib.core}">
			<include name="**/*.jar" />
		</fileset>
        <fileset dir="${lib.pentaho}">
            <include name="mondrian-3.10.0.1-130.jar" />
            <include name="log4j-1.2.17.jar" />
            <include name="slf4j-api-1.7.3.jar" />
            <include name="pentaho-platform-core-5.4.0.1-130.jar" />
			<include name="pentaho-platform-api-5.4.0.1-130.jar" />
        </fileset>
        <fileset dir="${lib.servlet}">
            <include name="servlet-api.jar" />
        </fileset>
    </path>

	<target name="all" >
		<antcall target="build" />
	</target>

	<target name="build" depends="release, clean-after-release" />

	<target name="clean">
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>

	<target name="init">
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
        <mkdir dir="${dist}/lib" />
    </target>

	<target name="compile" depends="clean, init">

        <!-- Builds core sources -->
		<javac source="1.7" srcdir="${src}" destdir="${build}" debug="true" fork="true" memorymaximumsize="128m" memoryinitialsize="128m">
			<classpath refid="classpath" />
		</javac>
		
	</target>

    <target name="release" depends="compile">
        <jar destfile="${basedir}/${dist}" jarfile="${dist}/lib/${app.name}-${version}.jar">
            <fileset dir="${build}" />
            <manifest>
                <section name="${name}">
                    <attribute name="Implementation-Title" value="${title}" />
                    <attribute name="Implementation-Version" value="${version}" />
                    <attribute name="Implementation-Vendor" value="SecureOps Inc." />
                </section>
            </manifest>
        </jar>

        <copy todir="${dist}/lib">
            <fileset dir="${lib.core}">
                <include name="**/*.jar" />
            </fileset>
        </copy>

    </target>


	<!-- Delete any created directories and their contents -->
	<target name="clean-after-release">
		<!--delete dir="${build}" /-->
	</target>
</project>
